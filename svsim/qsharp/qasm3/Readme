I have some instructions for getting using OpenQASM3 via the QCOR compiler that I’m ready to share! There are still language features I haven’t found a good way to support yet, but I can at least get some examples with new version 3 syntax to run against our simulator, which I expect means they will work well for DM-Sim too. I’ll chare the .qasm and corresponding .ll files as attachments, along with instructions for using a docker container for invoking qcor in case you want to try generating some of your own.  The two files I have seen work are a QASM2 Grover program and a QASM3 GHZ. The GHZ code uses loops for both establishing the state and measuring it out, so is more an example of using newer control flow features and not an interesting algorithm in its own right. I’m working on getting a QPE sample, but that will require some fixes on the QCOR side to make sure we can get something close to what DM-sim already implements.
 
As part of the files I’m sharing, I’ve included QSharpQcorShim.cpp. This exposes functions needed by the samples I’ve tried so far, including a setup function “__quantum__rt__initialize” that will get called by the main defined in the ll file. I’ve gone ahead and put the call to “GetSVSim” in there, so you would need to update that function body to do any preparation needed to initialize the DM-Sim and pass it to the “InitializeQirContext” call.
 
To run the qcor compiler via docker, you can use a command like this:
docker run --rm -v <source_folder>:/tmp/qcor qcor/cli -c "qcor --emit-llvm /tmp/qcor/grover.qasm 2> /tmp/qcor/grover.ll"
This should automatically trigger the download of the qcor/cli image if you don’t already have it, create a container and share the given folder into it, and then invoke qcor on the file and capture the results into an .ll. Then you can take the resulting ll file and compile it along with the shim cpp file and the rest of your libraries, and you should be able to get a runnable executable.
 
If you like, we can schedule some time to look at this together in person and I can walk you through what I’ve found works and what doesn’t, and I can then follow up once I have more samples that I know do interesting things!
